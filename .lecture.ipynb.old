{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hardness"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### P vs NP"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"imgs/np.png\" width=\"400px\"></img>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### NP-Complete (NPC)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "NP-Complete problems are decisional problems, meaning their solution is a value in $\\{0, 1\\}$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"imgs/npc.png\" width=\"400\"></img>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### NP-Hard and NP-Complete problems"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "NP-Hard problems cannot be solved in poly time but can only verified in poly time.<br>\n",
    "They lift the constraint on the solution value.<br>\n",
    "They are generally more difficult then NP-Complete problems."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"imgs/nph.png\" width=\"600px\"></img>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SAT - Satisfiability of Boolean Formulas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Boolean Formula F in Conjunctive Normal Form (CNF):\n",
    ">$F = (x_2 \\lor \\overline{x_3} \\lor x_8) \\land (\\overline{x_1} \\lor x_7 \\lor x_8)$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Given a set of variables we an have an assignment $\\tau:$\n",
    "> $ \\tau:~\\langle x_1, ..., x_N \\rangle~\\rightarrow~\\{0, 1\\}^N$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Given an assignment we can establish the value of a formula:\n",
    "> $F(~\\tau~(x_1, ..., x_N)~) = \n",
    "\\begin{cases} \n",
    "    T & \\text{if F evaluates to true with}~\\tau\\\\\n",
    "    F & \\text{if F evaluates to false with}~\\tau\n",
    "\\end{cases}$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Problem \n",
    " + N variables: $ x_1, x_2, ..., x_n \\in \\{0, 1\\}$\n",
    " + Boolean Formula F in CNF\n",
    " + Establish if it exists a truth assignment $\\tau~(x_1, ..., x_N)$ such that $F(~\\tau~(x_1, ..., x_N)~) = \\text{T}$\n",
    "     "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Theorem (Cook-Levin)**: SAT problem is NP-Complete."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Every problem in NP reduces polynomially to SAT, i.e. we can find a way to transform any problem in NP to SAT in polynomial time."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Paths in a Graph"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " + **Eulerian Path**: all edges are traversed once $\\longrightarrow$ linear\n",
    " + **Hamiltonian Path**: all nodes are traversed once $\\longrightarrow$ NPC"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Knapsack"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Knapsack is a NP-Hard problem in its general version and NP-Complete in its decisional version."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Problem"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Application Example"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We want to implement a file download manager on a servers which can transfer data on blocks of W bytes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Input**: $n$ files, for each of them we know:\n",
    "+ size: $w_1, w_2, ..., w_n$\n",
    "+ value: $v_1, v_2, ..., v_n$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Goal**: find a subset of the $n$ files to transfer all together staying withing W bytes and maximizing the value of the files without splitting them."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### General Formulation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the general case, we want to fill the knapsack with some of the objects without going over its max capacity and maximizing the revenue."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Input**:<br>\n",
    "+ integer $W$, the max capacity\n",
    "+ integer array $w[]$ of (positive) weights for the $n$ objects\n",
    "+ integer array $v[]$ of values for the $n$ values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Output**:\n",
    "+ a subset $S \\subseteq [1..n]$ which maximizes $\\sum_{i \\in S} v[i]$ under the constraint $\\sum_{i \\in S} w[i] \\leq W$ as we want S to fit into the knapsack"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our goal is to find the optimal value for the best possible set $S^*$. We can also find $S^*$ with additional polynomial time. <br>\n",
    "In this general formulation Knapsack problem is NP-Hard."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we want to know if for the given input there is a subset $S$ for which $\\sum_{i \\in S} v[i] \\geq \\alpha$ then we have a NP-Complete problem."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Knapsack is a restricted version of a more general problem, Partition. In this problem we want to split a multiset of integers into two groups so that they have the same sum."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Approaches"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Knapsack problem is a good and illustrative example for studying NPC and NPH problems. <br>\n",
    "It is a hard problem but we can still do something:\n",
    "+ exact computation for some special cases\n",
    "+ approximate algorithm for a close to optimal solution"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Brute-Force"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first possible approach is the Brute-Force enumeration of all possible subsets S to find the best one.<br>\n",
    "The cost of this approach is $\\tilde{O}(2^n)$, where $n$ is the number of objects in input.\n",
    ">**Note**: with $\\tilde{O}$ notation we ignore polynomial factors:\n",
    "$$\n",
    "\\tilde{O}(f(n))=O(f(n) \\cdot n^{O(1)})\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   | 0  1  2  3  4  5  6  \n",
      "----------------------------\n",
      " v | 1  2  3  4  5  6  7  \n",
      " w | 3  4  5  6  7  8  9  \n",
      "\n",
      "9\n",
      "{3, 4}\n"
     ]
    }
   ],
   "source": [
    "v = [1, 2, 3, 4, 5, 6, 7]\n",
    "w = [3, 4, 5, 6, 7, 8, 9]\n",
    "n = len(v)\n",
    "W = 13\n",
    "\n",
    "best, bestS = 0, set()\n",
    "\n",
    "def printData():\n",
    "    print(\"   | \", end=\"\")\n",
    "    for i in range(n):\n",
    "        print(i, end=\"  \")\n",
    "    print()\n",
    "    print(\"-\"*n*4)\n",
    "    print(\" v | \", end=\"\")\n",
    "    for e in v:\n",
    "        print(e, end=\"  \")\n",
    "    print()\n",
    "    print(\" w | \", end=\"\")\n",
    "    for e in w:\n",
    "        print(e, end=\"  \")\n",
    "    print(\"\\n\")\n",
    "    \n",
    "def bruteForce(S = set(), size = 0, sum = 0, i = 0):\n",
    "    global best, bestS\n",
    "    if(i >= n):\n",
    "        if(sum > best):\n",
    "            best = sum\n",
    "            bestS = S\n",
    "    else:\n",
    "        bruteForce(S, size, sum, i+1)\n",
    "        if(size + w[i] <= W):\n",
    "            bruteForce(S.union({i}), size + w[i], sum + v[i], i+1)\n",
    "    \n",
    "bruteForce()\n",
    "\n",
    "\n",
    "printData()\n",
    "print(best)\n",
    "print(bestS)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Following this approach is equel to generating all binary sequences $B$ of length $n$ such that $S = \\{i \\in [1..n]: B[i]=1\\} $ and $\\sum_{i \\in S} w[i] \\leq W$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"imgs/rt.png\" width=\"400px\"></img>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">$S = \\{2, 4, 5\\}$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dynamic Programming"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"imgs/dp1.png\" width=\"900\"></img>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">$\n",
    "T[i][j] =\n",
    "\\begin{cases} \n",
    "    0 & if~~~i=0\\\\\n",
    "    0 & if~~~j=0\\\\\n",
    "    T[i-1][j] & if~~~j<w_i\\\\\n",
    "    max\\{\\\\ \\quad T[i-1][j], \\\\ \\quad T[i-1][j-w_i]+v_i~\\} & otherwise\n",
    "\\end{cases}\n",
    "$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    |  0  1  2  3  4  5  6  7  8  9 10 11 12 13\n",
      "  ----------------------------------------------\n",
      "  0 |  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n",
      "  1 |  0  0  0  1  1  1  1  1  1  1  1  1  1  1\n",
      "  2 |  0  0  0  1  2  2  2  3  3  3  3  3  3  3\n",
      "  3 |  0  0  0  1  2  3  3  3  4  5  5  5  6  6\n",
      "  4 |  0  0  0  1  2  3  4  4  4  5  6  7  7  7\n",
      "  5 |  0  0  0  1  2  3  4  5  5  5  6  7  8  9\n",
      "  6 |  0  0  0  1  2  3  4  5  6  6  6  7  8  9\n",
      "  7 |  0  0  0  1  2  3  4  5  6  7  7  7  8  9\n",
      "\n",
      "9\n",
      "{3, 4}\n"
     ]
    }
   ],
   "source": [
    "v = [1, 2, 3, 4, 5, 6, 7]\n",
    "w = [3, 4, 5, 6, 7, 8, 9]\n",
    "n = len(v)\n",
    "W = 13\n",
    "\n",
    "def dp1():\n",
    "    T = [[0 for j in range(W+1)] for i in range(n+1)]\n",
    "    \n",
    "    #table formatting\n",
    "    print(\"    |\", end=\"\")\n",
    "    for i in range(0, W+1):\n",
    "        print(\"{0:3d}\".format(i), end=\"\")\n",
    "    print()\n",
    "    print(\" \", \"-\"*((W+1)*3 + 4))\n",
    "    print(\"{0:3d} |\".format(0), end=\"\")\n",
    "    for i in range(0, W+1):\n",
    "        print(\"{0:3d}\".format(T[0][i]), end=\"\")\n",
    "    print()\n",
    "    \n",
    "    #filling the table\n",
    "    for i in range(1, n+1):\n",
    "        print(\"{0:3d} |{1:3d}\".format(i, T[i][0]), end=\"\")\n",
    "        for j in range(1, W+1):\n",
    "            if(w[i-1] > j): \n",
    "                T[i][j] = T[i-1][j]\n",
    "            else:\n",
    "                T[i][j] = max(T[i-1][j], T[i-1][j - w[i-1]] + v[i-1])\n",
    "            print(\"{0:3d}\".format(T[i][j]), end=\"\")\n",
    "        print()\n",
    "    print()\n",
    "    \n",
    "    S, i, j = set(), n, W\n",
    "    \n",
    "    while(i>0 and j>0):\n",
    "        if(T[i][j] > T[i-1][j]):\n",
    "            S = S.union({i-1})\n",
    "            j = j - w[i-1]\n",
    "        i = i-1\n",
    "\n",
    "    return (S, T[n][W])\n",
    "    \n",
    "bestS, best = dp1()\n",
    "print(best)\n",
    "print(bestS)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"imgs/dp2.png\" width=\"900\"></img>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">$\n",
    "T[i][j] =\n",
    "\\begin{cases} \n",
    "    0 & if~~i=0\\\\\n",
    "    0 & if~~j=0\\\\\n",
    "    T[i-1][j] & if~~j<v_i\\\\\n",
    "    min\\{\\\\ \\quad T[i-1][j], \\\\ \\quad T[i-1][j-v_i]+w_i~\\} & otherwise\n",
    "\\end{cases}\n",
    "$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    |  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\n",
      "  ----------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "  0 | 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43\n",
      "  1 |  0  3 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43\n",
      "  2 |  0  3  4  7 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43\n",
      "  3 |  0  3  4  5  8  9 12 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43\n",
      "  4 |  0  3  4  5  6  9 10 11 14 15 18 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43\n",
      "  5 |  0  3  4  5  6  7 10 11 12 13 16 17 18 21 22 25 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43\n",
      "  6 |  0  3  4  5  6  7  8 11 12 13 14 15 18 19 20 21 24 25 26 29 30 33 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43\n",
      "  7 |  0  3  4  5  6  7  8  9 12 13 14 15 16 17 20 21 22 23 24 27 28 29 30 33 34 35 38 39 42 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43\n",
      "\n",
      "9\n",
      "{3, 4}\n"
     ]
    }
   ],
   "source": [
    "v = [1, 2, 3, 4, 5, 6, 7]\n",
    "w = [3, 4, 5, 6, 7, 8, 9]\n",
    "n = len(v)\n",
    "W = 13\n",
    "\n",
    "def dp2():\n",
    "    vmax = max(v)\n",
    "    wsum = sum(w) + 1\n",
    "    \n",
    "    T = [[wsum for j in range(n*vmax + 1)] for i in range(n+1)]\n",
    "    \n",
    "    #table formatting\n",
    "    print(\"    |\", end=\"\")\n",
    "    for i in range(0, n*vmax+1):\n",
    "        print(\"{0:3d}\".format(i), end=\"\")\n",
    "    print()\n",
    "    print(\" \", \"-\"*((n*vmax+1)*3 + 4))\n",
    "    print(\"{0:3d} |\".format(0), end=\"\")\n",
    "    for i in range(0, n*vmax+1):\n",
    "        print(\"{0:3d}\".format(T[0][i]), end=\"\")\n",
    "    print()\n",
    "    \n",
    "    #filling the table\n",
    "    for i in range(n+1):\n",
    "        T[i][0] = 0\n",
    "    for i in range(1, n+1):\n",
    "        print(\"{0:3d} |{1:3d}\".format(i, T[i][0]), end=\"\")\n",
    "        for j in range(1, n*vmax + 1):\n",
    "            if(v[i-1] > j): \n",
    "                T[i][j] = T[i-1][j]\n",
    "            else:\n",
    "                T[i][j] = min(T[i-1][j], T[i-1][j - v[i-1]] + w[i-1])\n",
    "            print(\"{0:3d}\".format(T[i][j]), end=\"\")\n",
    "        print()\n",
    "    print()\n",
    "    \n",
    "    res = -1\n",
    "    while(res < n*vmax and T[n][res+1] <= W):\n",
    "        res = res + 1\n",
    "    \n",
    "    S, i, j = set(), n, res\n",
    "    \n",
    "    while(i>0 and j>0):\n",
    "        if(T[i][j] < T[i-1][j]):\n",
    "            S = S.union({i-1})\n",
    "            j = j - v[i-1]\n",
    "        i = i-1\n",
    "\n",
    "    return (S, res)\n",
    "    \n",
    "bestS, best = dp2()\n",
    "print(best)\n",
    "print(bestS)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "| **Solution** | **Cost in Time** |\n",
    "|:------------:|:--------:|\n",
    "|Brute Force| $\\tilde{O}(2^n)$ |\n",
    "|DP1| $O(n*W)$ |\n",
    "|DP2| $O(n^2*V_{max})$ |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Approximation Algorithms"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When we want to use approximation algorithms to approximate the optimal solution for an NP-Hard problem $\\Pi$, we can have two cases:\n",
    "+ **minimize** the **cost**\n",
    "+ **maximize** the **benefit**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We assume an optimal solution $S^*$ exists and it has a cost $cost(S^*)= \\text{OPT}$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Def. : r-approximation**\n",
    ">An r-approximation, with $r>1$, gives a solution $S$ such that:<br><br>\n",
    "$\n",
    "\\begin{align}\n",
    "\\quad\\quad\\quad minimization: \\frac{cost(S)}{\\text{OPT}} \\leq r\n",
    "\\quad\\quad\\quad maximization: \\frac{\\text{OPT}}{cost(S)} \\leq r\n",
    "\\end{align}\n",
    "$<br><br>\n",
    "Sometimes the maximization case is equivalently called \n",
    "$\n",
    "\\begin{align}\n",
    "\\frac{1}{r}-\\text{approximation}\n",
    "\\end{align}\n",
    "$\n",
    "as we can write:<br><br>\n",
    "$\n",
    "\\begin{align}\n",
    "\\quad\\quad\\quad maximization: cost(S) \\leq \\frac{1}{r}~\\text{OPT}\n",
    "\\end{align}\n",
    "$<br><br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that even though in the maximization case we want to maximize the benefit, we call it $cost(S)$ anyway."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Moreover, we are interested in polynomial time approximation, whenever it is possible."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use **Knapsack** as an example as before. The problem is stated as follows:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Input**:\n",
    "+ $n$ items\n",
    "+ array of values $v[]$, where $\\forall i \\in [1..n] . v_i > 0$\n",
    "+ array of weights $w[]$, where $\\forall i \\in [1..n] . w_i > 0$\n",
    "+ capacity $W > 0$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Output**:\n",
    "a subset $S \\subseteq [1..n]$ such that:\n",
    "+ the total weight of items in S stays below the capacity: $\\sum_{i \\in S} w_i \\leq W$\n",
    "+ the total value of items in S $~\\sum_{i \\in S} v_i~$ is minimized"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2-approximation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We start by seeing a 2-approximation.<br>\n",
    "**Idea**: we can firstly give priority to items with higer value/weight ratio\n",
    "$\n",
    "\\begin{align}\n",
    "\\frac{v_i}{w_i}\n",
    "\\end{align}\n",
    "$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can suppose, wlog., that items are numbered as follows:<br><br>\n",
    "$\n",
    "\\begin{align}\n",
    "\\quad\\quad\\quad \\frac{v_i}{w_i} \\geq \\frac{v_2}{w_2} \\geq ~...~ \\geq \\frac{v_n}{w_n}\n",
    "\\end{align}\n",
    "$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def greedy():\n",
    "    global W\n",
    "    S = set()\n",
    "    for i in range(n):\n",
    "        if(w[i] <= W):\n",
    "            S = S.union({i})\n",
    "            W = W - w[i]\n",
    "    costS = 0\n",
    "    for i in S:\n",
    "        costS = costS + v[i]\n",
    "    return (S, costS)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n",
      "{0, 5}\n"
     ]
    }
   ],
   "source": [
    "v = [7, 6, 5, 4, 3, 2, 1]\n",
    "w = [9, 8, 7, 6, 5, 4, 3]\n",
    "n = len(v)\n",
    "W = 13\n",
    "\n",
    "S, costS = greedy()\n",
    "print(costS)\n",
    "print(S)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that with a **greedy** approach like this we can get an accurate result (in this case the result is actually exact)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However, in some cases this approach can fail. Let's see an example:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\n",
    "\\begin{align}\n",
    "\\forall i \\in [1..n-1],~~\n",
    "\\frac{v_i}{w_i} = 1 \\quad\n",
    "\\begin{cases}\n",
    "v_1 = v_2 = ... = v_{n-1} = 1\\\\\n",
    "w_1 = w_2 = ... = w_{n-1} = 1\n",
    "\\end{cases}\n",
    "\\end{align}\n",
    "$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\n",
    "\\begin{align}\n",
    "\\quad\\quad\\quad\\quad\\quad\\quad~\n",
    "\\frac{v_n}{w_n} < 1 \\quad\n",
    "\\begin{cases}\n",
    "v_n = W-1\\\\\n",
    "w_n = W\n",
    "\\end{cases}\n",
    "\\end{align}\n",
    "\\quad\\quad$, \n",
    "where $W=kn$ for any large $k>1$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n",
      "{0, 1, 2, 3, 4, 5, 6}\n"
     ]
    }
   ],
   "source": [
    "v = [1, 1, 1, 1, 1, 1, 1, 39]\n",
    "w = [1, 1, 1, 1, 1, 1, 1, 40]\n",
    "n = len(v)\n",
    "W = 40 #here we choose k = 5\n",
    "\n",
    "S, costS = greedy()\n",
    "print(costS)\n",
    "print(S)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As seen in the running example, the result from the **greedy** approach is:<br><br>\n",
    "$\n",
    "\\quad\\quad\\quad\n",
    "\\begin{align}\n",
    "cost(S) = m_G = \\sum_{i \\in S} v_i = n-1 \n",
    "\\end{align}\n",
    "$<br>\n",
    "while we have that:<br><br>\n",
    "$\n",
    "\\quad\\quad\\quad\n",
    "OPT = W-1\n",
    "$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Thus, we get:<br><br>\n",
    "$\n",
    "\\begin{align}\n",
    "\\quad\\quad\\quad\n",
    "\\frac{OPT}{cost(S)} =\n",
    "\\frac{W-1}{n-1} =\n",
    "\\frac{kn-1}{n-1} \\sim\n",
    "k\n",
    "\\end{align}\n",
    "$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we have a large k or at least a $k>2$ like in the running example, we cannot guarantee a **2-approximation**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To fix this issue, we can add a last step in the algorithm:<br><br>\n",
    "$\n",
    "\\begin{align}\n",
    "\\quad\\quad\\quad\n",
    "return~~ max \\{m_G, v_{max}\\}\n",
    "\\end{align}\n",
    "$,$\\quad\\quad$ \n",
    "where\n",
    "$\n",
    "~~\n",
    "\\begin{align}\n",
    "v_{max} = \\max_{1 \\leq i \\leq n} v_i\n",
    "\\end{align}\n",
    "$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "def approx_2():\n",
    "    global W\n",
    "    S = set()\n",
    "    for i in range(n):\n",
    "        if(w[i] <= W):\n",
    "            S = S.union({i})\n",
    "            W = W - w[i]\n",
    "    \n",
    "    mG = 0\n",
    "    for i in S:\n",
    "        mG = mG + v[i]\n",
    "    \n",
    "    vmax, imax = 0, 0\n",
    "    for i, e in enumerate(v):\n",
    "        if(e > vmax):\n",
    "            vmax, imax = e, i\n",
    "    \n",
    "    costS = max(mG, vmax)\n",
    "    if(costS > mG):\n",
    "        S = {imax}\n",
    "    \n",
    "    return (S, costS)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "39\n",
      "{7}\n"
     ]
    }
   ],
   "source": [
    "v = [1, 1, 1, 1, 1, 1, 1, 39]\n",
    "w = [1, 1, 1, 1, 1, 1, 1, 40]\n",
    "n = len(v)\n",
    "W = 40 #here we choose k = 5\n",
    "\n",
    "S, costS = approx_2()\n",
    "print(costS)\n",
    "print(S)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's now see how how this last variation can now guarantee a **2-approximation**.<br>\n",
    "What we're going to show is an implicit argument in any approximation algorithm.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we do not know $OPT$, we can prove we have a 2-approximation using an upperbound $UB \\geq OPT$ for the maximization case or a lowerbound $LB \\leq OPT$ for the minimization one:<br><br>\n",
    "$\n",
    "\\begin{align}\n",
    "\\quad\\quad\\quad maximization \\quad\\quad\n",
    "\\frac{OPT}{cost(S)} \\leq \\frac{UB}{cost(S)} \\leq r\\\\\n",
    "\\end{align}\n",
    "$<br><br>\n",
    "$\n",
    "\\begin{align}\n",
    "\\quad\\quad\\quad minimization \\quad\\quad\n",
    "\\frac{cost(S)}{OPT} \\leq \\frac{cost(S)}{LB} \\leq r\n",
    "\\end{align}\n",
    "$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In our case we have a maximization problem, thus we need to find an upperbound for $OPT$.<br>\n",
    "We can have **2 cases**:\n",
    "1. if all items fit into $W$, we reach $OPT$ by choosing the whole set\n",
    "2. otherwise, some items have to be discarded"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The non trivial case we're interested in is the second one."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Goal**:<br><br>\n",
    "$\n",
    "\\begin{align}\n",
    "\\quad\\quad\\quad\n",
    "\\frac{OPT}{cost(S)} = \\frac{OPT}{\\max\\{m_G, v_{max}\\}} \\leq 2\n",
    "\\end{align}\n",
    "$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Assume that $j$ is the first item that does not fit. We have that $\\overline{w_j}$ is the lasrgest prefix of consecutive items that fit:<br><br>\n",
    "$\n",
    "\\quad\\quad\\quad\n",
    "\\begin{align}\n",
    "\\overline{w_j} = \\sum_{i=1}^{j-1} w_i \\leq W, ~ \\quad but \\quad \\sum_{i=1}^{j} w_j > W\n",
    "\\end{align}\n",
    "$\n",
    "<br><br>\n",
    "$\n",
    "\\quad\\quad\\quad\n",
    "\\begin{align}\n",
    "\\overline{v_j} = \\sum_{i=1}^{j-1} v_i\n",
    "\\end{align}\n",
    "$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The **claim** we want to prove is the following:<br><br>\n",
    "$\n",
    "\\quad\\quad\\quad UB = \\overline{v_j} + v_j > OPT\n",
    "$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Suppose that item j can be split into $j~'$ and $j~''$ such that $v_j = v_{j~'} + v_{j~''}$ and $w_j = w_{j~'} + w_{j~''}$, with $w_{j~'}$ fitting perfectly the difference btween $\\overline{w_j}$ and $W$:<br><br>\n",
    "$\n",
    "\\begin{align}\n",
    "\\quad\\quad\\quad \\sum_{i=1}^{j-1} w_i + w_{j~'} = W\n",
    "\\end{align}\n",
    "$\n",
    "<br><br>\n",
    "This way we reach perfectly $OPT$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have **2** possible **cases**:\n",
    "+  $\\quad \\overline{v_j} > v_j ~\\Longrightarrow~ OPT ~<~ 2~\\overline{v_j} ~\\leq~ 2~m_G ~\\leq~ 2\\max\\{m_g, v_{max} \\}$\n",
    "+  $\\quad \\overline{v_j} \\leq v_j ~\\Longrightarrow~ OPT ~<~ 2~{v_j} ~\\leq~ 2~v_{max} ~\\leq~ 2\\max\\{m_g, v_{max} \\}$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can equivalently write:<br><br>\n",
    "$\n",
    "\\quad\\quad\\quad\n",
    "\\begin{align}\n",
    "OPT * \\frac{1}{2} \\leq cost(S)\n",
    "\\end{align}\n",
    "$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**\\begin{TODO}**: complete exercise"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Natural question: \n",
    "$\n",
    "\\begin{align}\n",
    "OPT * (1 - \\epsilon) \\leq cost(S)\n",
    "\\end{align}\n",
    "$?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "FPTAS (i.e. poly also in $\\frac{1}{\\epsilon}, ~0<\\epsilon<1)$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exercise**: suppose that $w_i \\leq \\epsilon W$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Prove that steps 1+2 give \n",
    "$\n",
    "\\begin{align}\n",
    "OPT * (1 - \\epsilon) \\leq cost(S)\n",
    "\\end{align}\n",
    "$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hint: the first time j does not fit, the knapsack is at least $(1-\\epsilon)$ full"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**\\end{TODO}**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### FPTAS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the general case we assume that $w_i \\leq W$ and for any  $\\epsilon$, with $0 < \\epsilon < 1$ we want to prove that we can approximate the optimal value $OPT$ as follows:<br><br>\n",
    "$\n",
    "\\quad\\quad\\quad\n",
    "OPT~(1-\\epsilon) \\leq cost(S)\n",
    "$<br><br>\n",
    "in running time of $O(n^3~/~\\epsilon)$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's start from the DP2 **exact** solution we've seen before that we can compute in $O(n^2~v_{max})$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Idea**: since $v_{max}$ can be very large, we scale *all* the values:<br><br>\n",
    "$\n",
    "\\quad\\quad\\quad\n",
    "\\begin{align}\n",
    "v_i \\longrightarrow \\tilde{v_i} = \\Bigl\\lfloor\\frac{v_i}{k}\\Bigr\\rfloor \n",
    "\\end{align}\n",
    "$<br><br>\n",
    "wit $k$ to be fixed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So we have:<br>\n",
    "$\\quad\\quad\\quad (A)$. Original Instance: $\\quad v_i, w_i, W$<br>\n",
    "$\\quad\\quad\\quad (B)$. Scaled Instance: $\\quad \\tilde{v_i}, w_i, W$ + __DP2__ exact solution"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can state some facts:\n",
    "+ $\\quad S$ is a solution for $(B) \\Rightarrow S$ is a solution for $(A)$, as weights do not change<br>\n",
    "+ $\n",
    "\\quad\n",
    "\\begin{align}\n",
    "{\\tilde{v}}_{max} = \\Bigl\\lfloor\\frac{v_{max}}{k}\\Bigr\\rfloor\n",
    "\\end{align}\n",
    "$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Clearly the cost changes (?)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Goal**: chosing\n",
    "$\n",
    "\\begin{align}\n",
    "k=\\frac{\\epsilon~v_{max}}{n}\n",
    "\\end{align}\n",
    "$, the optimal solution $S$ in $(B)$ satisfies<br><br>\n",
    "$\n",
    "\\quad\\quad\\quad\n",
    "\\begin{align}\n",
    "\\sum_{i \\in S} v_i \\geq (1-\\epsilon)~OPT = (1-\\epsilon) \\sum_{i \\in S^*} v_i\n",
    "\\end{align}\n",
    "$<br><br>\n",
    "**Note**: in the first term we have $v_i$, not $\\tilde{v_i}$, as we are using $S$ as a solution in $(A)$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's start from the fact that<br><br>\n",
    "$\n",
    "\\quad\\quad\\quad\n",
    "\\begin{align}\n",
    "\\tilde{v_i} = \\Bigl\\lfloor\\frac{v_{i}}{k}\\Bigr\\rfloor\n",
    "\\end{align}\n",
    "$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So, beacuse of the flooring approximation, we have that<br><br>\n",
    "$\n",
    "\\quad\\quad\\quad\n",
    "\\begin{align}\n",
    "\\frac{v_i}{k} - 1 ~\\leq~ \\tilde{v_i} ~\\leq~ \\frac{v_i}{k}\n",
    "\\end{align}\n",
    "$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And, multipying by $k$, we get:<br><br>\n",
    "$\\quad\\quad\\quad (i).~~ v_i ~\\geq~ k~\\tilde{v_i}$\n",
    "$\\quad\\quad\\quad (ii).~~ k~\\tilde{v_i} ~\\geq~ {v_i} - k$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, since $S$ is optimal in $(B)$ and $S^*$ is optimal in $(A)$, $S^*$ cannot be better than $S$ in $(B)$:<br><br>\n",
    "$\n",
    "\\quad\\quad\\quad\n",
    "(iii).~~\n",
    "\\begin{align}\n",
    "\\sum_{i \\in S} \\tilde{v_i} ~\\geq~ \\sum_{i \\in {S^*}} \\tilde{v_i}\n",
    "\\end{align}\n",
    "$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we have all the necessary tools to proove our __goal__:<br><br>\n",
    "$\n",
    "\\quad\\quad\\quad\\quad\\quad\n",
    "\\begin{align}\n",
    "\\sum_{i \\in S} v_i \\quad&\\geq\\quad\\quad (i)\\\\\n",
    "\\sum_{i \\in S} k~\\tilde{v_i} \\quad&\\geq\\quad\\quad (iii)\\\\ \n",
    "\\sum_{i \\in {S^*}} k~\\tilde{v_i} \\quad&\\geq\\quad\\quad (ii)\\\\ \n",
    "\\sum_{i \\in {S^*}} (v_i-k) \\quad&= \\\\\n",
    "\\sum_{i \\in {S^*}} v_i - |S^*|~k \\quad&\\geq\\quad\\quad \\Bigl(\\sum_{i \\in {S^*}} v_i = OPT ~~~and~~~ |S^*| \\leq n\\Bigr)\\\\ \\\\\n",
    "OPT - k~n \\quad&\\geq\\quad\\quad (*)\\\\ \\\\ \n",
    "OPT - \\epsilon~OPT \\quad&=\\\\ \\\\\n",
    "(1-\\epsilon)~OPT\\quad\n",
    "\\end{align}\n",
    "$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To conclude this prove, we need to show that, since $v_{max} \\leq OPT$ and since our choice of $k$ is \n",
    "$\n",
    "\\begin{align}\n",
    "k = \\frac{\\epsilon~v_{max}}{n}\n",
    "\\end{align}\n",
    "$\n",
    ":<br><br>\n",
    "$\n",
    "\\quad\\quad\\quad\n",
    "k~n ~=~ \\epsilon~v_{max} ~\\leq~ \\epsilon~OPT\n",
    "$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To show the running time we need to consider:<br><br>\n",
    "$\n",
    "\\quad\\quad\\quad\n",
    "\\begin{align}\n",
    "\\tilde{v}_{max} ~=~ \\Big\\lfloor\\frac{v_{max}}{k}\\Big\\rfloor ~\\leq~ \\frac{v_{max}}{k} ~=~ v_{max}~ \\frac{n}{\\epsilon~v_{max}} ~=~ \\frac{n}{\\epsilon}\n",
    "\\end{align}\n",
    "$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So the total running time is:<br><br>\n",
    "$\n",
    "\\quad\\quad\\quad\n",
    "O(n^2~\\tilde{v}_{max}) ~=~ O(n^3/\\epsilon)\n",
    "$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def knapsackApprox1eps( v, w, W, epsilon ):\n",
    "  n = len(v) # == len(w)\n",
    "  vmax = max(v)\n",
    "  k = float(epsilon) * float(vmax) / n\n",
    "  vtilde = [ int(math.floor(v[i]/k)) for i in xrange(n)]\n",
    "  print( 'k =', k  )\n",
    "  print( v )\n",
    "  print( vtilde )\n",
    "  Z = knapsackOptimalDP2set( vtilde, w, W )\n",
    "  S = [ (v[i], w[i]) for i in Z]\n",
    "  print(S, 'with total value', sum([ v for (v,w) in S]) )"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
